<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
    "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="lc.common.code.service.grid.GridCommonCodeMapper">

	<select id="listHost" parameterType="hashmap" resultType="hashmap">
			SELECT A.* FROM (
				SELECT ROWNUM RNUM, A.*
				FROM (			
				        SELECT B.HOST_KEY
				               ,B.SYS_KEY
				               ,B.RUN_MODE
				               ,B.HOST_ID
				               ,B.HOST_NM
				               ,B.HOST_IP
				               ,B.USE_YN
				               ,COUNT(*) OVER () ROWCNT
				        FROM TB_SYS A
				            ,TB_HOST B
				        WHERE A.SYS_KEY = B.SYS_KEY
				        AND   A.USE_YN = 'Y'
				        AND   B.USE_YN = 'Y'
						<if test = "SYS_KEY != null and SYS_KEY !=''">
							AND   A.SYS_KEY = #{SYS_KEY}
						</if>        
				        ORDER BY A.SYS_KEY, B.HOST_NM
						<if test = "sidx != null and sidx !=''">
							,${sidx}
						</if>				        
						<if test = "sord != null and sord !=''">
							${sord}
						</if>				        
				) A   
				<![CDATA[
				WHERE ROWNUM <= (#{page}*#{rows})    
				]]> 
			) A
			WHERE RNUM >= (#{page}-1)*#{rows}+1 
	</select>	

	<select id="listHostEnv" parameterType="hashmap" resultType="hashmap">
			SELECT A.HOST_ENV_KEY 
			      ,A.HOST_KEY 
			      ,A.HOST_ENV_CD
			      ,A.HOST_ENV_VAL
			      ,A.USE_YN
			      ,A.CREATR_KEY
			      ,A.CRE_DTTM
			      ,A.ALTRPSN_KEY
			      ,A.ALTR_DTTM
			      ,B.HOST_NM
			FROM TB_HOST_ENV A
			    ,TB_HOST B
			WHERE A.HOST_KEY = #{HOST_KEY} 
			AND   A.HOST_KEY = B.HOST_KEY
			AND   A.USE_YN = 'Y' 
			AND   B.USE_YN = 'Y' 
			ORDER BY HOST_ENV_CD
	</select>	

	<select id="getForDeleteHost" parameterType="hashmap" resultType="int">
			SELECT COUNT(A.HOST_ENV_KEY) 
			FROM TB_HOST_ENV A
			    ,TB_HOST B
			WHERE A.HOST_KEY = #{HOST_KEY} 
			AND   A.HOST_KEY = B.HOST_KEY
			AND   A.USE_YN = 'Y' 
			AND   B.USE_YN = 'Y' 
	</select>	
	
	<insert id="insertHost" parameterType="hashmap">
		INSERT INTO TB_HOST
		(
		      HOST_KEY
		    , SYS_KEY
		    , RUN_MODE
		    , HOST_ID
		    , HOST_NM
		    , HOST_IP
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		      #{HOST_KEY}
		    , #{SYS_KEY}
		    , 'Y'
		    , #{HOST_ID, jdbcType=CHAR}
		    , #{HOST_NM, jdbcType=CHAR}
		    , #{HOST_IP, jdbcType=CHAR}
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)		
	</insert>	
	
	<update id="updateHost" parameterType="hashmap">
		UPDATE TB_HOST
		SET   SYS_KEY =  #{SYS_KEY}
			, HOST_ID =  #{HOST_ID, jdbcType=CHAR}
		    , HOST_NM =  #{HOST_NM, jdbcType=CHAR}
		    , HOST_IP =  #{HOST_IP, jdbcType=CHAR}
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE HOST_KEY =  #{HOST_KEY}
	</update>	
	
	<update id="deleteHost" parameterType="hashmap">
		UPDATE TB_HOST
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE HOST_KEY =  #{HOST_KEY}		
	</update>	
	
	<insert id="insertHostEnv" parameterType="map">
		INSERT INTO TB_HOST_ENV
		(
		      HOST_ENV_KEY
		    , HOST_KEY
		    , HOST_ENV_CD
		    , HOST_ENV_VAL
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		      #{HOST_ENV_KEY}
		    , #{HOST_KEY}
		    , #{HOST_ENV_CD, jdbcType=CHAR}
		    , #{HOST_ENV_VAL, jdbcType=CHAR}
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)		
	</insert>	
	
	<update id="updateHostEnv" parameterType="hashmap">
		UPDATE TB_HOST_ENV
		SET   HOST_ENV_CD =  #{HOST_ENV_CD, jdbcType=CHAR}
			, HOST_ENV_VAL =  #{HOST_ENV_VAL, jdbcType=CHAR}
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE HOST_ENV_KEY =  #{HOST_ENV_KEY}		
	</update>	
	
	<update id="deleteHostEnv" parameterType="hashmap">
		UPDATE TB_HOST_ENV
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE HOST_ENV_KEY =  #{HOST_ENV_KEY}		
	</update>	
	
	<!-- **************************************  -->
	
	<select id="listApsvr" parameterType="hashmap" resultType="hashmap">
			SELECT A.* FROM (
				SELECT ROWNUM RNUM, A.*
				FROM (			
				        SELECT A.APSVR_KEY
				               ,A.APSVR_TP
				               ,A.APSVR_NM
				               ,A.CENTCUTSVR_YN
				               ,A.SVC_YN
				               ,A.URL
				               ,A.APSVR_ID
				               ,A.HOST_KEY
				               ,B.SYS_KEY
				               ,C.SYS_NM
				               ,COUNT(*) OVER () ROWCNT
				        FROM TB_APSVR A
				            ,TB_HOST B
				            ,TB_SYS C
				        WHERE A.HOST_KEY = B.HOST_KEY
				        AND   B.SYS_KEY = C.SYS_KEY
						<if test = "SYS_KEY != null and SYS_KEY !=''">
							AND   B.SYS_KEY = #{SYS_KEY}
						</if>        
						<if test = "HOST_KEY != null and HOST_KEY !=''">
							AND   A.HOST_KEY = #{HOST_KEY}
						</if>        
				        ORDER BY A.HOST_KEY, A.APSVR_NM
						<if test = "sidx != null and sidx !=''">
							,${sidx}
						</if>				        
						<if test = "sord != null and sord !=''">
							${sord}
						</if>				        
				) A   
				<![CDATA[
				WHERE ROWNUM <= (#{page}*#{rows})    
				]]> 
			) A
			WHERE RNUM >= (#{page}-1)*#{rows}+1 
	</select>	

	<select id="listApsvrEnv" parameterType="hashmap" resultType="hashmap">
			SELECT A.APSVR_ENV_KEY 
			      ,A.APSVR_KEY 
			      ,A.APSVR_ENV_CD
			      ,A.APSVR_ENV_VAL
			      ,A.USE_YN
			      ,A.CREATR_KEY
			      ,A.CRE_DTTM
			      ,A.ALTRPSN_KEY
			      ,A.ALTR_DTTM
			      ,B.APSVR_ID
			      ,B.APSVR_NM
			FROM TB_APSVR_ENV A
			    ,TB_APSVR B
			WHERE A.APSVR_KEY = #{APSVR_KEY} 
			AND   A.APSVR_KEY = B.APSVR_KEY
			AND   A.USE_YN = 'Y' 
			ORDER BY APSVR_ENV_CD
	</select>	

	<select id="getForDeleteApsvr" parameterType="hashmap" resultType="int">
			SELECT COUNT(A.APSVR_ENV_KEY) 
			FROM TB_APSVR_ENV A
			    ,TB_APSVR B
			WHERE A.APSVR_KEY = #{APSVR_KEY} 
			AND   A.APSVR_KEY = B.APSVR_KEY
			AND   A.USE_YN = 'Y' 
	</select>	
	
	<insert id="insertApsvr" parameterType="hashmap">
		INSERT INTO TB_APSVR
		(
		      APSVR_KEY
		    , APSVR_TP
		    , APSVR_NM
		    , CENTCUTSVR_YN
		    , SVC_YN
		    , URL
		    , HOST_KEY
		    , APSVR_ID
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		      #{APSVR_KEY}
		    , #{APSVR_TP, jdbcType=CHAR}
		    , #{APSVR_NM, jdbcType=CHAR}
		    , #{CENTCUTSVR_YN, jdbcType=CHAR}
		    , #{SVC_YN, jdbcType=CHAR}
		    , #{URL, jdbcType=CHAR}
		    , #{HOST_KEY, jdbcType=CHAR}
		    , #{APSVR_ID, jdbcType=CHAR}
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)		
	</insert>	
	
	<update id="updateApsvr" parameterType="hashmap">
		UPDATE TB_APSVR
		SET   HOST_KEY =  #{HOST_KEY}
			, APSVR_ID =  #{APSVR_ID, jdbcType=CHAR}
		    , APSVR_NM =  #{APSVR_NM, jdbcType=CHAR}
		    , APSVR_TP =  #{APSVR_TP, jdbcType=CHAR}
		    , CENTCUTSVR_YN =  #{CENTCUTSVR_YN, jdbcType=CHAR}
		    , SVC_YN =  #{SVC_YN, jdbcType=CHAR}
		    , URL =  #{URL, jdbcType=CHAR}
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE APSVR_KEY =  #{APSVR_KEY}
	</update>	
	
	<update id="deleteApsvr" parameterType="hashmap">
		DELETE FROM TB_APSVR
		WHERE APSVR_KEY =  #{APSVR_KEY}		
	</update>	
	
	<insert id="insertApsvrEnv" parameterType="map">
		INSERT INTO TB_APSVR_ENV
		(
		      APSVR_ENV_KEY
		    , APSVR_KEY
		    , APSVR_ENV_CD
		    , APSVR_ENV_VAL
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		      #{APSVR_ENV_KEY}
		    , #{APSVR_KEY}
		    , #{APSVR_ENV_CD, jdbcType=CHAR}
		    , #{APSVR_ENV_VAL, jdbcType=CHAR}
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)		
	</insert>	
	
	<update id="updateApsvrEnv" parameterType="hashmap">
		UPDATE TB_APSVR_ENV
		SET   APSVR_ENV_CD =  #{APSVR_ENV_CD, jdbcType=CHAR}
			, APSVR_ENV_VAL =  #{APSVR_ENV_VAL, jdbcType=CHAR}
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE APSVR_ENV_KEY =  #{APSVR_ENV_KEY}		
	</update>	
	
	<update id="deleteApsvrEnv" parameterType="hashmap">
		UPDATE TB_APSVR_ENV
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE APSVR_ENV_KEY =  #{APSVR_ENV_KEY}		
	</update>	
	
	<!-- **************************************  -->
	
	<select id="listTree" parameterType="hashmap"  resultType="hashmap">			
		SELECT KEY
		      ,NM
		      ,TP_KEY
		      ,PARENT
		<if test = "n_level != null and n_level !=''">
		      ,LEVEL+#{n_level} LVL
		</if>
		<if test = "n_level == null or n_level ==''">
		      ,LEVEL LVL
		</if>		      
		      ,DECODE(CONNECT_BY_ISLEAF,1,'true','false')  ISLEAF
		      ,TP
		      ,DECODE(TP, 'C', 'COMPANY', 'S', 'SYSTEM', 'J', 'JOB PROJECT', 'P', 'PROJECT') TP_NM
		FROM (
		    SELECT CO_KEY KEY
		          ,CO_NM NM
		          ,'0' PARENT
		          ,'C'||CO_KEY TP_KEY
		          ,'C' TP
		    FROM TB_CO
		    WHERE USE_YN = 'Y'
		    UNION ALL
		    SELECT SYS_KEY KEY
		          ,SYS_NM NM
		          ,'C'||CO_KEY PARENT
		          ,'S'||SYS_KEY TP_KEY
		          ,'S' TP
		    FROM TB_SYS
		    WHERE USE_YN = 'Y'
		    UNION ALL
		    SELECT JOB_PROJ_KEY KEY
		          ,PROJ_NM NM
		          ,'S'||SYS_KEY PARENT
		          ,'J'||JOB_PROJ_KEY TP_KEY
		          ,'J' TP
		    FROM TB_JOB_PROJ
		    WHERE USE_YN = 'Y'
		    UNION ALL
		    SELECT PROJ_KEY KEY
		          ,PROJ_NM NM
		          ,'J'||JOB_PROJ_KEY PARENT
		          ,'P'||PROJ_KEY TP_KEY
		          ,'P' TP
		    FROM TB_PROJ
		    WHERE USE_YN = 'Y'
		) A
		WHERE 1 = 1
		<if test = "nodeid == null or nodeid ==''">
			AND   A.TP = 'C'
		</if> 
		<if test = "nodeid != null and nodeid !=''">
		<![CDATA[		
			AND   LEVEL <= #{n_level} + 1
		]]>			
		</if> 	
		<if test = "nodeid == null or nodeid ==''">
			START WITH PARENT = '0'
		</if>	
		<if test = "nodeid != null and nodeid !=''">
			START WITH PARENT = #{nodeid}
		</if> 						
		CONNECT BY PRIOR TP_KEY = PARENT
		ORDER SIBLINGS BY NM
	</select>	
	
	<select id="getCo" parameterType="hashmap"  resultType="hashmap">			
		SELECT CO_KEY
		     , CO_NM
		     , CO_ADDR
		     , CO_TEL_NO
		     , CO_FAX
		     , REP_NM
		     , REP_TEL_NO
		     , CO_DESCR
		     , CO_CD
		FROM   TB_CO
		WHERE USE_YN = 'Y'
		AND   CO_KEY = #{CO_KEY}
		ORDER BY CO_NM
	</select>	
	
	<insert id="insertCo" parameterType="hashmap">
		INSERT INTO TB_CO
		(
		       CO_KEY
		     , CO_NM
		     , CO_ADDR
		     , CO_TEL_NO
		     , CO_FAX
		     , REP_NM
		     , REP_TEL_NO
		     , CO_DESCR
		     , CO_CD		
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		       #{CO_KEY}
		     , #{CO_NM, jdbcType=CHAR}
		     , #{CO_ADDR, jdbcType=CHAR}
		     , #{CO_TEL_NO, jdbcType=CHAR}
		     , #{CO_FAX, jdbcType=CHAR}
		     , #{REP_NM, jdbcType=CHAR}
		     , #{REP_TEL_NO, jdbcType=CHAR}
		     , #{CO_DESCR, jdbcType=CHAR}
		     , #{CO_CD, jdbcType=CHAR}		
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)	
	</insert>
	
	<update id="updateCo" parameterType="hashmap">
		UPDATE TB_CO
		SET    CO_NM = #{CO_NM, jdbcType=CHAR}
		     , CO_ADDR = #{CO_ADDR, jdbcType=CHAR}
		     , CO_TEL_NO = #{CO_TEL_NO, jdbcType=CHAR}
		     , CO_FAX = #{CO_FAX, jdbcType=CHAR}
		     , REP_NM = #{REP_NM, jdbcType=CHAR}
		     , REP_TEL_NO = #{REP_TEL_NO, jdbcType=CHAR}
		     , CO_DESCR = #{CO_DESCR, jdbcType=CHAR}
		     , CO_CD = #{CO_CD, jdbcType=CHAR}		
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE CO_KEY =  #{CO_KEY}	 		
	</update>
	
	<update id="deleteCo" parameterType="hashmap">
		UPDATE TB_CO
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE CO_KEY =  #{CO_KEY}		
	</update>
	
	<select id="listSystem" parameterType="hashmap"	resultType="hashmap">
		SELECT SYS_KEY
			   ,CO_KEY
		       ,SYS_CD
		       ,SYS_TP
		       ,SYS_NM
		       ,SYS_DESCR
		       ,EA_ACC_NM
		FROM TB_SYS
		WHERE USE_YN = 'Y'
		AND   CO_KEY = #{CO_KEY}
		ORDER BY SYS_NM
	</select>	
	
	<select id="getSystem" parameterType="hashmap"	resultType="hashmap">
		SELECT SYS_KEY
			   ,CO_KEY
		       ,SYS_CD
		       ,SYS_TP
		       ,SYS_NM
		       ,SYS_DESCR
		       ,EA_ACC_NM
		FROM TB_SYS
		WHERE USE_YN = 'Y'
		AND   SYS_KEY = #{SYS_KEY}
		ORDER BY SYS_NM
	</select>	
	
	<insert id="insertSystem" parameterType="hashmap">
		INSERT INTO TB_SYS
		(
	       SYS_KEY
		   ,CO_KEY
	       ,SYS_CD
	       ,SYS_TP
	       ,SYS_NM
	       ,SYS_DESCR		
	       ,EA_ACC_NM
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
	       #{SYS_KEY}
		   ,#{CO_KEY}
	       ,#{SYS_CD, jdbcType=CHAR}
	       ,#{SYS_TP, jdbcType=CHAR}
	       ,#{SYS_NM, jdbcType=CHAR}
	       ,#{SYS_DESCR, jdbcType=CHAR}	
	       ,#{EA_ACC_NM, jdbcType=CHAR}
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)	
	</insert>
	
	<update id="updateSystem" parameterType="hashmap">
		UPDATE TB_SYS
		SET SYS_CD = #{SYS_CD, jdbcType=CHAR}
	       ,SYS_TP = #{SYS_TP, jdbcType=CHAR}
	       ,SYS_NM = #{SYS_NM, jdbcType=CHAR}
	       ,SYS_DESCR = #{SYS_DESCR, jdbcType=CHAR}	
	       ,EA_ACC_NM	 = #{EA_ACC_NM, jdbcType=CHAR}
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE  SYS_KEY =  #{SYS_KEY} 		
	</update>
	
	<update id="deleteSystem" parameterType="hashmap">
		UPDATE TB_SYS
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE SYS_KEY  =  #{SYS_KEY}	
	</update>	
	
	<select id="listBiz" parameterType="hashmap" resultType="hashmap">
		SELECT JOB_PROJ_KEY
		       ,SYS_KEY
		       ,JOB_PROJ_CD
		       ,JOB_PROJ_TP
		       ,PROJ_NM
		       ,PROJ_DESCR
		       ,PROJ_SRT_PREARG_DT
		       ,PROJ_END_PREARG_DT
		       ,PROJ_REAL_SRT_DT
		       ,PROJ_REAL_END_DT
		FROM TB_JOB_PROJ
		WHERE USE_YN = 'Y'
		AND   SYS_KEY = #{SYS_KEY}
		ORDER BY PROJ_NM
	</select>	
	
	<select id="getBiz" parameterType="hashmap" resultType="hashmap">
		SELECT JOB_PROJ_KEY
		       ,SYS_KEY
		       ,JOB_PROJ_CD
		       ,JOB_PROJ_TP
		       ,PROJ_NM
		       ,PROJ_DESCR
		       ,PROJ_SRT_PREARG_DT
		       ,PROJ_END_PREARG_DT
		       ,PROJ_REAL_SRT_DT
		       ,PROJ_REAL_END_DT
		FROM TB_JOB_PROJ
		WHERE USE_YN = 'Y'
		AND   JOB_PROJ_KEY = #{JOB_PROJ_KEY}
		ORDER BY PROJ_NM
	</select>	
	
	<insert id="insertBiz" parameterType="hashmap">
		INSERT INTO TB_JOB_PROJ
		(
		       JOB_PROJ_KEY
		       ,SYS_KEY
		       ,JOB_PROJ_CD
		       ,JOB_PROJ_TP
		       ,PROJ_NM
		       ,PROJ_DESCR
		       ,PROJ_SRT_PREARG_DT
		       ,PROJ_END_PREARG_DT
		       ,PROJ_REAL_SRT_DT
		       ,PROJ_REAL_END_DT		
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		       #{JOB_PROJ_KEY}
		       ,#{SYS_KEY}
		       ,#{JOB_PROJ_CD, jdbcType=CHAR}
		       ,#{JOB_PROJ_TP, jdbcType=CHAR}
		       ,#{PROJ_NM, jdbcType=CHAR}
		       ,#{PROJ_DESCR, jdbcType=CHAR}
		       ,#{PROJ_SRT_PREARG_DT, jdbcType=CHAR}
		       ,#{PROJ_END_PREARG_DT, jdbcType=CHAR}
		       ,#{PROJ_REAL_SRT_DT, jdbcType=CHAR}
		       ,#{PROJ_REAL_END_DT, jdbcType=CHAR}			
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)	
	</insert>
	
	<update id="updateBiz" parameterType="hashmap">
		UPDATE TB_JOB_PROJ
		SET    JOB_PROJ_CD = #{JOB_PROJ_CD, jdbcType=CHAR}
		       ,PROJ_NM = #{PROJ_NM, jdbcType=CHAR}
		       ,PROJ_DESCR = #{PROJ_DESCR, jdbcType=CHAR}
		       ,PROJ_SRT_PREARG_DT = #{PROJ_SRT_PREARG_DT, jdbcType=CHAR}
		       ,PROJ_END_PREARG_DT = #{PROJ_END_PREARG_DT, jdbcType=CHAR}		
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE  JOB_PROJ_KEY =  #{JOB_PROJ_KEY} 		
	</update>
	
	<update id="deleteBiz" parameterType="hashmap">
		UPDATE TB_JOB_PROJ
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE JOB_PROJ_KEY =  #{JOB_PROJ_KEY}	
	</update>
	
	<select id="listProj" parameterType="hashmap" resultType="hashmap">
		SELECT PROJ_KEY
		       ,JOB_PROJ_KEY
		       ,PROJ_ID
		       ,PROJ_TP
		       ,PROJ_NM
		       ,PROJ_DESCR
		       ,PROJ_CD
		       ,SYNC_YN
		FROM TB_PROJ
		WHERE USE_YN = 'Y'
		AND   JOB_PROJ_KEY = #{JOB_PROJ_KEY}
		ORDER BY PROJ_NM
	</select>	
	
	<select id="getProj" parameterType="hashmap" resultType="hashmap">
		SELECT PROJ_KEY
		       ,JOB_PROJ_KEY
		       ,PROJ_ID
		       ,PROJ_TP
		       ,PROJ_NM
		       ,PROJ_DESCR
		       ,PROJ_CD
		       ,SYNC_YN
		FROM TB_PROJ
		WHERE USE_YN = 'Y'
		AND   PROJ_KEY = #{PROJ_KEY}
		ORDER BY PROJ_NM
	</select>
	
	<insert id="insertProj" parameterType="hashmap">
		INSERT INTO TB_PROJ
		(
		       PROJ_KEY
		       ,JOB_PROJ_KEY
		       ,PROJ_ID
		       ,PROJ_TP
		       ,PROJ_NM
		       ,PROJ_DESCR
		       ,PROJ_CD
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		       #{PROJ_KEY}
		       ,#{JOB_PROJ_KEY}
		       ,#{PROJ_ID, jdbcType=CHAR}
		       ,#{PROJ_TP, jdbcType=CHAR}
		       ,#{PROJ_NM, jdbcType=CHAR}
		       ,#{PROJ_DESCR, jdbcType=CHAR}
		       ,#{PROJ_CD, jdbcType=CHAR}		
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)	
	</insert>
	
	<update id="updateProj" parameterType="hashmap">
		UPDATE TB_PROJ
		SET     PROJ_ID = #{PROJ_ID, jdbcType=CHAR}
		       ,PROJ_TP = #{PROJ_TP, jdbcType=CHAR}
		       ,PROJ_NM = #{PROJ_NM, jdbcType=CHAR}
		       ,PROJ_DESCR = #{PROJ_DESCR, jdbcType=CHAR}
		       ,PROJ_CD = #{PROJ_CD, jdbcType=CHAR}		
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE PROJ_KEY =  #{PROJ_KEY} 		
	</update>
	
	<update id="deleteProj" parameterType="hashmap">
		UPDATE TB_PROJ
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE PROJ_KEY =  #{PROJ_KEY}	
	</update>
	
	<select id="listProjEnv" parameterType="hashmap" resultType="hashmap">
		SELECT PROJ_ENV_KEY
		       ,PROJ_KEY
		       ,PROJ_ENV_CD
		       ,PROJ_ENV_VAL
		       ,SYNC_YN
		FROM TB_PROJ_ENV
		WHERE USE_YN = 'Y'
		AND   PROJ_KEY = #{PROJ_KEY}
		ORDER BY PROJ_ENV_CD
	</select>	
	
	<insert id="insertProjEnv" parameterType="hashmap">
		INSERT INTO TB_PROJ_ENV
		(
		        PROJ_ENV_KEY
		       ,PROJ_KEY
		       ,PROJ_ENV_CD
		       ,PROJ_ENV_VAL
		    , USE_YN
		    , CREATR_KEY
		    , CRE_DTTM
		    , ALTRPSN_KEY
		    , ALTR_DTTM
		)   
		VALUES 
		(
		        #{PROJ_ENV_KEY}
		       ,#{PROJ_KEY}
		       ,#{PROJ_ENV_CD, jdbcType=CHAR}
		       ,#{PROJ_ENV_VAL, jdbcType=CHAR}		
		    , 'Y'
		    , #{CREATR_KEY}
		    , SYSDATE
		    , #{ALTRPSN_KEY}
		    , SYSDATE		
		)	
	</insert>
	
	<update id="updateProjEnv" parameterType="hashmap">
		UPDATE TB_PROJ_ENV
		SET     PROJ_ENV_CD = #{PROJ_ENV_CD, jdbcType=CHAR}
		       ,PROJ_ENV_VAL = #{PROJ_ENV_VAL, jdbcType=CHAR}		
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE PROJ_ENV_KEY = #{PROJ_ENV_KEY}		
	</update>
	
	<update id="deleteProjEnv" parameterType="hashmap">
		UPDATE TB_PROJ_ENV
		SET   USE_YN =  'N'
		    , ALTRPSN_KEY =  #{ALTRPSN_KEY}
		    , ALTR_DTTM =  SYSDATE
		WHERE PROJ_ENV_KEY =  #{PROJ_ENV_KEY}	
	</update>
		
	<!-- **************************************  -->
	
    <select id="listGroup" resultType="hashmap"  parameterType="hashmap" >
			SELECT A.* FROM (
				SELECT ROWNUM RNUM, A.*
				FROM (    
				    SELECT  COMN.COMN_CD_KEY        COMN_CD_KEY
				        ,   PROJ.PROJ_NM            PROJ_NM
				        ,   PROJ.PROJ_KEY            PROJ_KEY
				        ,   PROJ.PROJ_KEY            H_PROJ_KEY
				        ,   COMN.CD                 CD
				        ,   COMN.CD                 H_CD
				        ,   COMN.CD_NM              CD_NM
				        ,   COMN.SORT_SEQ           SORT_SEQ
				        ,   COMN.HIRNK_COMN_CD_KEY  HIRNK_COMN_CD_KEY
				        ,   COMN.CD_DESCR           CD_DESCR
				        ,   COUNT(*) OVER () ROWCNT
				    FROM    TB_COMN_CD          COMN
				        ,   TB_PROJ             PROJ
				    WHERE   COMN.PROJ_KEY   IN (1, #{PROJ_KEY,jdbcType=NUMERIC})
				    AND     COMN.GRP_CD     =       #{GRP_CD}           
				    AND     PROJ.PROJ_KEY   =       COMN.PROJ_KEY
				    AND     COMN.USE_YN     =       'Y'                     
				    ORDER BY COMN.SORT_SEQ, COMN.CD_NM
				) A   
				<![CDATA[
				WHERE ROWNUM <= (#{page}*#{rows})    
				]]> 
			) A
			WHERE RNUM >= (#{page}-1)*#{rows}+1 		    
    </select>	
    
	<select id="listProjectByName" parameterType="hashmap" resultType="hashmap" >
			SELECT		JOB.PROJ_NM		JOB_PROJ_NM
					,	SYS.SYS_NM 		SYS_NM
					,	PROJ.PROJ_KEY 	PROJ_KEY
					, 	PROJ.PROJ_NM	PROJ_NM
					,	PROJ.PROJ_KEY 	KEY
					,	PROJ.PROJ_ID 	CD
					, 	PROJ.PROJ_NM	CD_NM
			FROM 	TB_JOB_PROJ JOB
					, 	TB_SYS SYS
					, 	TB_PROJ PROJ
			WHERE SYS.SYS_KEY		= JOB.SYS_KEY
			AND		JOB.JOB_PROJ_KEY 	= PROJ.JOB_PROJ_KEY
			/* AND		PROJ.PROJ_NM 	LIKE ' PROJ_NM ' */
			AND		PROJ.USE_YN = 'Y'
			ORDER BY SYS_NM , PROJ_NM
	</select> 
	
    <select id="listDetailCode" resultType="hashmap"  parameterType="hashmap"  >
		    SELECT  COMN.COMN_CD_KEY
		        ,   COMN.PROJ_KEY
		        ,   PROJ.PROJ_NM
		        ,   COMN.GRP_CD
		        ,   COMN.CD
		        ,   COMN.CD_NM
		        ,   COMN.SORT_SEQ
		        ,   COMN.CD_DESCR
		        ,   COMN.HIRNK_COMN_CD_KEY
		        ,   COMN.ETC_USE_TEXT
		        ,   COMN.ETC_USE_TEXT2
		        ,   COMN.ETC_USE_TEXT3
		        ,   COMN.ETC_USE_TEXT4
		        ,   COMN.ETC_USE_TEXT5
		        ,   COMN.ETC_USE_TEXT6
		        ,   COMN.ETC_USE_TEXT7
		        ,   COMN.ETC_USE_TEXT8
		        ,   COMN.ETC_USE_TEXT9
		        ,   COMN.ETC_USE_TEXT10
		        ,   COMN.USE_YN
		        ,   COMN.CREATR_KEY
		        ,   COMN.CRE_DTTM
		        ,   COMN.ALTRPSN_KEY
		        ,   COMN.ALTR_DTTM
		    FROM    TB_COMN_CD  COMN
		        ,   TB_PROJ     PROJ
		    WHERE   COMN.PROJ_KEY   =   PROJ.PROJ_KEY
		    AND     COMN.USE_YN     =   'Y'
		    AND     COMN.PROJ_KEY   IN (1, #{PROJ_KEY,jdbcType=NUMERIC})
		    AND     COMN.GRP_CD     =   #{GRP_CD}               
		    ORDER BY COMN.SORT_SEQ , COMN.CD_NM
    </select>
    
	<insert id="insertCode" parameterType="hashmap" >
		    INSERT INTO TB_COMN_CD (
		        COMN_CD_KEY
		    ,   PROJ_KEY
		    ,   GRP_CD
		    ,   CD
		    ,   CD_NM
		    ,   SORT_SEQ
		    ,   CD_DESCR
		    ,   HIRNK_COMN_CD_KEY           
		    ,   ETC_USE_TEXT
		    ,   ETC_USE_TEXT2
		    ,   ETC_USE_TEXT3
		    ,   ETC_USE_TEXT4
		    ,   ETC_USE_TEXT5
		    ,   ETC_USE_TEXT6
		    ,   ETC_USE_TEXT7
		    ,   ETC_USE_TEXT8
		    ,   ETC_USE_TEXT9
		    ,   ETC_USE_TEXT10
		    ,   USE_YN
		    ,   CREATR_KEY
		    ,   CRE_DTTM
		    ,   ALTRPSN_KEY
		    ,   ALTR_DTTM
		    ) VALUES
		    (
		        #{COMN_CD_KEY}
		    ,   #{PROJ_KEY}
		    ,   #{GRP_CD}
		    ,   #{CD}
		    ,   #{CD_NM}
		    ,   #{SORT_SEQ}
		    ,   #{CD_DESCR}
		    ,   #{HIRNK_COMN_CD_KEY,jdbcType=NUMERIC}
		    ,   #{ETC_USE_TEXT,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT2,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT3,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT4,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT5,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT6,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT7,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT8,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT9,jdbcType=VARCHAR}
		    ,   #{ETC_USE_TEXT10,jdbcType=VARCHAR}
		    ,   #{USE_YN}
		    ,   #{CREATR_KEY}
		    ,   SYSDATE
		    ,   #{ALTRPSN_KEY}
		    ,   SYSDATE
		    )
    </insert>  
    
    <update id="updateCode" parameterType="hashmap" >
		    UPDATE  TB_COMN_CD
		    SET     PROJ_KEY            =   #{PROJ_KEY}
		        ,   GRP_CD              =   #{GRP_CD}
		        ,   CD                  =   #{CD}
		        ,   CD_NM               =   #{CD_NM}
		        ,   SORT_SEQ            =   #{SORT_SEQ}
		        ,   CD_DESCR            =   #{CD_DESCR}
		        ,   HIRNK_COMN_CD_KEY   =   #{HIRNK_COMN_CD_KEY,jdbcType=NUMERIC}
		        ,   ETC_USE_TEXT        =   #{ETC_USE_TEXT,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT2       =   #{ETC_USE_TEXT2,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT3       =   #{ETC_USE_TEXT3,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT4       =   #{ETC_USE_TEXT4,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT5       =   #{ETC_USE_TEXT5,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT6       =   #{ETC_USE_TEXT6,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT7       =   #{ETC_USE_TEXT7,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT8       =   #{ETC_USE_TEXT8,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT9       =   #{ETC_USE_TEXT9,jdbcType=VARCHAR}
		        ,   ETC_USE_TEXT10      =   #{ETC_USE_TEXT10,jdbcType=VARCHAR}
		        ,   USE_YN              =   #{USE_YN}
		        ,   ALTRPSN_KEY         =   #{ALTRPSN_KEY}
		        ,   ALTR_DTTM           =   SYSDATE
		    WHERE   COMN_CD_KEY         =   #{COMN_CD_KEY}
    </update>  
    
    <delete id="deleteCode" parameterType="hashmap" >
		    UPDATE  TB_COMN_CD
		    SET     USE_YN      =   #{USE_YN}
		           ,ALTRPSN_KEY =   #{ALTRPSN_KEY}
		    WHERE   COMN_CD_KEY =   #{COMN_CD_KEY}
    </delete>    
    
	<select id="getForDeleteCode" parameterType="hashmap" resultType="int">
			SELECT COUNT(B.CD)
			FROM TB_COMN_CD A
			    ,TB_COMN_CD B
			WHERE A.CD = B.GRP_CD
			AND   A.COMN_CD_KEY = #{COMN_CD_KEY}
			AND   B.USE_YN = 'Y'
	</select>	        		   
</mapper>
